model2_class <- ifelse(model2_pred >= 0.5, 1, 0)
probability_class <- factor(model2_class, levels = c(1, 0))
actual_class <- factor(test2$TARGET_FLAG, levels = c(1, 0))
confusionMatrix(probability_class, actual_class)
model3 <- model2 %>% stepAIC(trace = F)
summary(model3)
library(MASS)
model3 <- model2 %>% stepAIC(trace = F)
summary(model3)
model3_pred <- predict(model3, test2, type = "response")
model3_class <- ifelse(model3_pred >= 0.5, 1, 0)
probability_class <- factor(model3_class, levels = c(1, 0))
actual_class <- factor(test2$TARGET_FLAG, levels = c(1, 0))
confusionMatrix(probability_class, actual_class)
Eval_Log_Reg_pred <- predict(model3, ins_eval_imputed, type = "response")
eval_pred <- predict(model3, ins_eval_imputed, type = "response")
eval_class <- ifelse(eval_pred >= 0.5, 1, 0)
eval_pred <- predict(model3, ins_eval_imputed, type = "response")
eval_class <- ifelse(eval_pred >= 0.5, 1, 0)
eval_pred <- predict(model3, ins_eval_imputed, type = "response")
eval_class <- ifelse(eval_pred >= 0.5, 1, 0)
eval_target_amt <- ifelse(eval_class == 1, predict(model3, ins_eval_imputed, type = "response"), 0)
ins_eval_imputed$TARGET_FLAG <- eval_class
ins_eval_imputed$TARGET_AMOUNT <- eval_target_amt
View(ins_eval_imputed)
ins_eval_imputed_final <- ins_eval_imputed %>%
mutate(JOB=ifelse((JOB==""),"Unknown",JOB))
eval_pred <- predict(model3, ins_eval_imputed_final, type = "response")
eval_class <- ifelse(eval_pred >= 0.5, 1, 0)
eval_target_amt <- ifelse(eval_class == 1, predict(model3, ins_eval_imputed_final, type = "response"), 0)
ins_eval_imputed_final$TARGET_FLAG <- eval_class
ins_eval_imputed_final$TARGET_AMOUNT <- eval_target_amt
View(ins_eval_imputed_final)
### Logistic Regression Model - 1 Prediction Metrics
```{r,message=FALSE,warning=FALSE,echo=F}
```
library(caret)
library(dplyr)
library(gdata)
library(tidyverse)
library(Amelia)
library(mice)
library(kableExtra)
library(data.table)
library(e1071)
library(corrplot)
library(MASS)
ins_train_input <- read.csv('insurance_training_data.csv')
ins_eval_input <- read.csv('insurance-evaluation-data.csv')
ins_train <- ins_train_input
ins_train$INCOME <- gsub('z_','',ins_train$INCOME)
ins_train$PARENT1 <- gsub('z_','',ins_train$PARENT1)
ins_train$HOME_VAL <- gsub('z_','',ins_train$HOME_VAL)
ins_train$MSTATUS <- gsub('z_','',ins_train$MSTATUS)
ins_train$SEX <- gsub('z_','',ins_train$SEX)
ins_train$EDUCATION <- gsub('z_','',ins_train$EDUCATION)
ins_train$JOB <- gsub('z_','',ins_train$JOB)
ins_train$CAR_USE <- gsub('z_','',ins_train$CAR_USE)
ins_train$BLUEBOOK <- gsub('z_','',ins_train$BLUEBOOK)
ins_train$CAR_TYPE <- gsub('z_','',ins_train$CAR_TYPE)
ins_train$RED_CAR <- gsub('z_','',ins_train$RED_CAR)
ins_train$OLDCLAIM <- gsub('z_','',ins_train$OLDCLAIM)
ins_train$REVOKED <- gsub('z_','',ins_train$REVOKED)
ins_train$URBANICITY <- gsub('z_','',ins_train$URBANICITY)
ins_train$INCOME <- as.numeric(gsub('[$,]','',ins_train$INCOME))
ins_train$HOME_VAL <- as.numeric(gsub('[$,]','',ins_train$HOME_VAL))
ins_train$BLUEBOOK <- as.numeric(gsub('[$,]','',ins_train$BLUEBOOK))
ins_train$OLDCLAIM <- as.numeric(gsub('[$,]','',ins_train$OLDCLAIM))
colSums(is.na(ins_train))
missmap(ins_train, main="Missing Values")
ins_train_imputed <- mice(ins_train, m = 1, method = "pmm", print = F) %>% complete()
colSums(is.na(ins_train_imputed))
missmap(ins_train_imputed, main="Missing Values")
summary(ins_train_imputed) %>% kable
indx<- which(sapply(ins_train_imputed, is.numeric))
ins_train_ordered <- ins_train_imputed
setcolorder(ins_train_ordered, indx)
nonbinary <- c(1:16)
X <- ins_train_ordered[1:16]
par(mfrow = c(4,4))
for (i in nonbinary) {
hist(X[,i], xlab = names(X[i]), main = names(X[i]))
}
par(mfrow = c(4,4))
for (i in nonbinary) {
d <- density(X[,i])
plot(d, main = names(X[i]))
polygon(d, col="red")
}
sapply(X, skewness, function(x) skewness(x))
par(mfrow = c(1,1))
# Correlation matrix among variables
X %>%
cor(., use = "complete.obs") %>%
corrplot(., method = "color", type = "upper", tl.col = "black", tl.cex=.8, diag = FALSE)
ins_eval <- ins_eval_input
ins_eval$INCOME <- gsub('z_','',ins_eval$INCOME)
ins_eval$PARENT1 <- gsub('z_','',ins_eval$PARENT1)
ins_eval$HOME_VAL <- gsub('z_','',ins_eval$HOME_VAL)
ins_eval$MSTATUS <- gsub('z_','',ins_eval$MSTATUS)
ins_eval$SEX <- gsub('z_','',ins_eval$SEX)
ins_eval$EDUCATION <- gsub('z_','',ins_eval$EDUCATION)
ins_eval$JOB <- gsub('z_','',ins_eval$JOB)
ins_eval$CAR_USE <- gsub('z_','',ins_eval$CAR_USE)
ins_eval$BLUEBOOK <- gsub('z_','',ins_eval$BLUEBOOK)
ins_eval$CAR_TYPE <- gsub('z_','',ins_eval$CAR_TYPE)
ins_eval$RED_CAR <- gsub('z_','',ins_eval$RED_CAR)
ins_eval$OLDCLAIM <- gsub('z_','',ins_eval$OLDCLAIM)
ins_eval$REVOKED <- gsub('z_','',ins_eval$REVOKED)
ins_eval$URBANICITY <- gsub('z_','',ins_eval$URBANICITY)
ins_eval$INCOME <- as.numeric(gsub('[$,]','',ins_eval$INCOME))
ins_eval$HOME_VAL <- as.numeric(gsub('[$,]','',ins_eval$HOME_VAL))
ins_eval$BLUEBOOK <- as.numeric(gsub('[$,]','',ins_eval$BLUEBOOK))
ins_eval$OLDCLAIM <- as.numeric(gsub('[$,]','',ins_eval$OLDCLAIM))
colSums(is.na(ins_eval))
missmap(ins_eval, main="Missing Values")
ins_eval_imputed <- mice(ins_eval, m = 1, method = "pmm", print = F) %>% complete()
ins_eval_imputed[is.na(ins_eval_imputed)] = 0
colSums(is.na(ins_eval_imputed))
missmap(ins_eval_imputed, main="Missing Values")
summary(ins_eval_imputed) %>% kable
indx<- which(sapply(ins_eval_imputed, is.numeric))
ins_eval_ordered <- ins_eval_imputed
setcolorder(ins_eval_ordered, indx)
nonbinary <- c(1:16)
X <- ins_eval_ordered[1:16]
par(mfrow = c(4,4))
for (i in nonbinary) {
hist(X[,i], xlab = names(X[i]), main = names(X[i]))
}
par(mfrow = c(4,4))
for (i in nonbinary) {
d <- density(X[,i])
plot(d, main = names(X[i]))
polygon(d, col="red")
}
sapply(X, skewness, function(x) skewness(x))
X<-X[4:16]
par(mfrow = c(1,1))
# Correlation matrix among variables
X %>%
cor(., use = "complete.obs") %>%
corrplot(., method = "color", type = "upper", tl.col = "black", tl.cex=.8, diag = FALSE)
ins_train_imputed_final <- ins_train_imputed %>%
mutate(JOB=ifelse((JOB==""),"Unknown",JOB))
ins_eval_imputed_final <- ins_eval_imputed %>%
mutate(JOB=ifelse((JOB==""),"Unknown",JOB))
set.seed(1003)
training_partition <- createDataPartition(ins_train_imputed_final$TARGET_FLAG, p=0.8, list = FALSE, times=1)
train2 <- ins_train_imputed_final[training_partition, ]
test2 <- ins_train_imputed_final[-training_partition, ]
model1 <- glm(formula = TARGET_FLAG ~ . - TARGET_AMT, family = binomial, data = train2)
summary(model1)
model2 <- glm(TARGET_FLAG ~ KIDSDRIV + HOMEKIDS + INCOME + PARENT1 + HOME_VAL + MSTATUS + EDUCATION + TRAVTIME + CAR_USE + BLUEBOOK + TIF + CAR_TYPE + CLM_FREQ + REVOKED + MVR_PTS + CAR_AGE + URBANICITY, data = train2, family = binomial)
summary(model2)
model3 <- model2 %>% stepAIC(trace = F)
summary(model3)
tinytex::reinstall_tinytex()
ggplot(df_sample, aes(x = region_txt)) + geom_dotplot(method="histodot", fill="green")+ coord_flip()
library(maps)
library(dplyr)
library(ggplot2)
library(Amelia)
library(kableExtra)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(readxl)
library(curl)
ggplot(df_sample, aes(x = region_txt)) + geom_dotplot(method="histodot", fill="green")+ coord_flip()
df_sample <- df %>% head(50)
ggplot(df_sample, aes(x = region_txt)) + geom_dotplot(method="histodot", fill="green")+ coord_flip()
data<- read.csv("https://raw.githubusercontent.com/jey1987/DATA608/master/Final%20Project/globalterrorismdb_csv.csv")
df <- data %>%
select(iyear,imonth,iday,country,country_txt,region,region_txt,provstate,city,attacktype1,attacktype1_txt,attacktype2,attacktype2_txt,attacktype3,attacktype3_txt)
names(data)[names(data) == "Ã¯..iyear"] <- "iyear"
df <- data %>%
select(iyear,imonth,iday,country,country_txt,region,region_txt,provstate,city,attacktype1,attacktype1_txt,attacktype2,attacktype2_txt,attacktype3,attacktype3_txt)
df %>% head() %>% kable()
df_sample <- df %>% head(50)
ggplot(df_sample, aes(x = region_txt)) + geom_dotplot(method="histodot", fill="green")+ coord_flip()
fit <- rpart(Y ~ ., data = simData)
install.packages("rpart", dependencies = FALSE)
fit <- rpart(Y ~ ., data = simData)
library(rpart)
fit <- rpart(Y ~ ., data = simData)
simData <- data.frame(Y=Y, X1=X1, X2=X2)
set.seed(624)
X1 <- rep(1:2, each=100)
Y <- X1 + rnorm(200, mean=0, sd=4)
set.seed(624)
X2 <- rnorm(200, mean=0, sd=2)
simData <- data.frame(Y=Y, X1=X1, X2=X2)
set.seed(624)
fit <- rpart(Y ~ ., data = simData)
varImp(fit)
library(caret)
varImp(fit)
set.seed(755)
X1 <- rep(1:2, each=100)
Y <- X1 + rnorm(200, mean=0, sd=4)
set.seed(755)
X2 <- rnorm(200, mean=0, sd=2)
simData <- data.frame(Y=Y, X1=X1, X2=X2)
set.seed(624)
fit <- rpart(Y ~ ., data = simData)
varImp(fit)
library(caret)
library(rpart)
set.seed(755)
X1 <- rep(1:2, each=100)
Y <- X1 + rnorm(600, mean=2, sd=4)
set.seed(755)
X2 <- rnorm(600, mean=2, sd=4)
simData <- data.frame(Y=Y, X1=X1, X2=X2)
set.seed(624)
fit <- rpart(Y ~ ., data = simData)
varImp(fit)
library(AppliedPredictiveModeling)
data(solubility)
grid1 <- expand.grid(n.trees=100, interaction.depth=1, shrinkage=0.1, n.minobsinnode=10)
gbm1 <- train(x = solTrainXtrans, y = solTrainY, method = 'gbm', tuneGrid = grid1, verbose = FALSE)
grid2 <- expand.grid(n.trees=100, interaction.depth=10, shrinkage=0.1, n.minobsinnode=10)
gbm2 <- train(x = solTrainXtrans, y = solTrainY, method = 'gbm', tuneGrid = grid2, verbose = FALSE)
varImp(gbm1)
varImp(gbm1)
gbm1 <- train(x = solTrainXtrans, y = solTrainY, method = 'gbm', tuneGrid = grid1, verbose = FALSE)
plot(varImp(gbm1))
library(gbm)
plot(varImp(gbm1))
varImp(gbm1)
varImp(gbm2)
varImp(gbm1)
varImp(gbm2)
varImp(gbm1)
varImp(gbm2)
varImp(gbm1)
varImp(gbm2)
library(caret)
library(rpart)
set.seed(755)
X1 <- rep(1:2, each=100)
Y <- X1 + rnorm(600, mean=2, sd=4)
set.seed(755)
X2 <- rnorm(600, mean=2, sd=4)
simData <- data.frame(Y=Y, X1=X1, X2=X2)
set.seed(624)
fit <- rpart(Y ~ ., data = simData)
varImp(fit)
library(mlbench)
set.seed(200)
simulated <- mlbench.friedman1(200, sd = 1)
simulated <- cbind(simulated$x, simulated$y)
simulated <- as.data.frame(simulated)
colnames(simulated)[ncol(simulated)] <- "y"
library(randomForest)
library(caret)
model1 <- randomForest(y ~ .,
data = simulated,
importance = TRUE,
ntree = 1000)
rfImp1 <- varImp(model1, scale = FALSE)
rfImp1
model2 <- randomForest(y ~ .,
data = simulated,
importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rfImp2
simulated$duplicate1 <- simulated$V1 + rnorm(200) * .1
cor(simulated$duplicate1, simulated$V1)
model2 <- randomForest(y ~ .,
data = simulated,
importance = TRUE,
ntree = 1000)
rfImp2 <- varImp(model2, scale = FALSE)
rfImp2
library(partykit)
library(dplyr)
cforest_model <- cforest(y ~ ., data=simulated)
# Unconditional importance measure
varimp(cforest_model) %>% sort(decreasing = T)
varimp(cforest_model, conditional=T) %>% sort(decreasing = T)
rfImp2
library(gbm)
gbm_Model <- gbm(y ~ ., data=simulated, distribution='gaussian')
summary(gbm_Model)
library(Cubist)
cubistModel <- cubist(x=simulated[,-(ncol(simulated)-1)], y=simulated$y, committees=100)
varImp(cubistModel)
df <- read.csv("GroceryDataSet.csv")
setwd("~/GitHub/DATA624/DATA-624/HW2")
df <- read.csv("GroceryDataSet.csv")
install.packages("arules", dependencies = FALSE)
library(arules)
df_sparse <- read.transactions("GroceryDataset.csv",format="basket",sep=",")
View(df_sparse)
View(df_sparse)
summary(df_sparse)
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
library(RColorBrewer)
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.8,maxlen=10))
inspect(association.rules[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1) # get subset rules in vector
length(subset.rules)  #> 3913
subset.association.rules. <- association.rules[-subset.rules] # remove subset rules.
inspect(subset.association.rules[1:10])
subset.association.rules. <- association.rules[-subset.rules] # remove subset rules.
inspect(subset.association.rules[1:10])
inspect(subset.association.rules.[1:10])
inspect(association.rules[1:10])
plot(subset.association.rules.)
install.packages("arulesViz", dependencies = FALSE)
plot(subset.association.rules.)
library(arulesViz)
plot(subset.association.rules.)
plot(association.rules.)
plot(association.rules)
top10subRules <- head(association.rules, n = 10, by = "confidence")
plot(top10subRules, method = "graph",  engine = "htmlwidget")
install.packages("visNetwork", dependencies = FALSE)
library(visNetwork)
plot(top10subRules, method = "graph",  engine = "htmlwidget")
install.packages("igraph", dependencies = FALSE)
library(igraph)
plot(top10subRules, method = "graph",  engine = "htmlwidget")
plot(top10subRules, method="paracoord")
subRules2<-head(association.rules, n=10, by="lift")
plot(top10subRules, method="paracoord")
plot(subRules2, method="paracoord")
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.2,maxlen=10))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.1,maxlen=10))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.25,maxlen=10))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.3,maxlen=10))
inspect(association.rules[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1) # get subset rules in vector
length(subset.rules)
subset.association.rules. <- association.rules[-subset.rules] # remove subset rules.
inspect(subset.association.rules.[1:10])
subRules2<-head(association.rules, n=10, by="lift")
plot(subRules2, method="paracoord")
itemFrequencyPlot(df_sparse,topN=20,type="relative",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.3,maxlen=5))
inspect(association.rules[1:10])
top10subRules <- head(association.rules, n = 10, by = "confidence")
plot(top10subRules, method = "graph",  engine = "htmlwidget")
subRules2<-head(association.rules, n=10, by="lift")
plot(subRules2, method="paracoord")
subRules2<-head(association.rules, n=10, by="lift")
plot(subRules2, method="paracoord")
top10subRules <- head(association.rules, n = 10, by = "confidence")
plot(top10subRules, method = "graph",  engine = "htmlwidget")
subRules2<-head(association.rules, n=10, by="lift")
plot(subRules2, method="paracoord")
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.8,maxlen=5))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.3,maxlen=5))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.2,maxlen=5))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.002, conf=0.3,maxlen=5))
inspect(association.rules[1:10])
subRules2<-head(association.rules, n=10, by="lift")
plot(subRules2, method="paracoord")
top10subRules <- head(association.rules, n = 10, by = "confidence")
plot(top10subRules, method = "graph",  engine = "htmlwidget")
association.rules <- apriori(df_sparse, parameter = list(supp=0.002, conf=0.8,maxlen=5))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.002, conf=0.3))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.01, conf=0.2))
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.01, conf=0.3))
inspect(association.rules[1:10])
length(association.rules)
association.rules <- apriori(df_sparse, parameter = list(supp=0.01, conf=0.25))
length(association.rules)
association.rules <- apriori(df_sparse, parameter = list(supp=0.01, conf=0.2))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.01, conf=0.25))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.02, conf=0.25))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.02, conf=0.3))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.01, conf=0.3))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.3))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.2))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.3))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.2))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3))
length(association.rules)
inspect(association.rules[1:10])
nrow(df)
supp=(6*7)/nrow(df)
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.2,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.8,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.5,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.4,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3,maxlen=5))
length(association.rules)
inspect(association.rules[1:10])
summary(df_sparse)
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(8,'Pastel1'), main="Frequently Purchased Products")
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(10,'Pastel3'), main="Frequently Purchased Products")
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(10,'Pastel3'), main="Frequently Purchased Products")
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(10,'Pastel2'), main="Frequently Purchased Products")
itemFrequencyPlot(df_sparse,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Frequently Purchased Products")
length(association.rules)
inspect(association.rules[1:10])
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.2,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.1,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1) # get subset rules in vector
length(subset.rules)
subset.association.rules. <- association.rules[-subset.rules] # remove subset rules.
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.83,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.8,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.7,maxlen=5))
length(association.rules)
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.7,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.6,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.4,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3,maxlen=5))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.001, conf=0.3))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.005, conf=0.3))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1) # get subset rules in vector
length(subset.rules)
subset.association.rules. <- association.rules[-subset.rules] # remove subset rules.
inspect(sort(subset.association.rules., by = 'lift')[1:10])
association.rules <- apriori(df_sparse, parameter = list(supp=0.004, conf=0.3))
length(association.rules)
inspect(sort(association.rules, by = 'lift')[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1) # get subset rules in vector
length(subset.rules)
subset.association.rules. <- association.rules[-subset.rules] # remove subset rules.
inspect(sort(subset.association.rules., by = 'lift')[1:10])
plot(subset.association.rules.)
plot(subset.association.rules.,method="two-key-plot")
plot(subset.association.rules.,method="two-key plot")
top10subRules <- head(subset.association.rules., n = 10, by = "confidence")
plot(top10subRules, method = "graph",  engine = "htmlwidget")
top10subRules <- head(subset.association.rules., n = 10, by = "lift")
plot(top10subRules, method = "graph",  engine = "htmlwidget")
plot(subset.association.rules.,method="two-key plot")
subRules2<-head(association.rules, n=10, by="lift")
plot(subRules2, method="paracoord")
subRules2<-head(subset.association.rules., n=10, by="lift")
plot(subRules2, method="paracoord")
summary(association.rules)
summary(subset.association.rules.)
summary(subset.association.rules.)
